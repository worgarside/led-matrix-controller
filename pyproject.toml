[tool.poetry]
name = "led-matrix-controller"
version = "1.3.0"
description = "Updates an RGB LED matrix with payloads from an MQTT topic"
authors = ["Will Garside <worgarside@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
pillow = "^10.4.0"
requests = "^2.32.3"
wg-utilities = { extras = ["exceptions"], version = "^5.15.4" }
paho-mqtt = "^2.1.0"
numpy = "^2.0.0"
httpx = "^0.27.0"

[tool.poetry.group.dev.dependencies]
rgbmatrixemulator = "^0.11.6"
pydeps = "^1.12.20"

[tool.poetry.group.test.dependencies]
pytest-codspeed = "^2.2.1"
pytest-env = "^1.1.3"
pytest-cov = "^5.0.0"
pytest-xdist = "^3.5.0"

[tool.pytest.ini_options]
addopts = [
  "-ra",
  "--strict-markers",
  "--strict-config",
  "--cov-report=xml",
  "--cov=led_matrix_controller",
  "-n",
  "auto",
]
xfail_strict = true
log_cli_level = "warning"
pythonpath = ["led_matrix_controller"]
testpaths = ["tests"]
env = [
  "ARTWORK_DIR=./artwork",
  "MQTT_USERNAME=test",
  "MQTT_PASSWORD=test",
  "DEBUG_MODE=1",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "def __ne__",
  "def __hash__",
  "def __str__",
  "@overload",
  "if TYPE_CHECKING",
  "pytest.fail",
]

[tool.coverage.run]
relative_files = true


[tool.mypy]
plugins = "numpy.typing.mypy_plugin"
always_true = "DEBUG_MODE"

exclude = ["_local_sandbox"]
mypy_path = "led_matrix_controller"
follow_imports = "normal"
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true

warn_return_any = true
warn_unused_ignores = true
warn_unused_configs = true
warn_redundant_casts = true

no_implicit_optional = true
strict_optional = true

strict_equality = true
explicit_package_bases = true
show_error_codes = true
enable_error_code = ["truthy-bool", "unused-awaitable"]

[tool.codespell]
ignore-words-list = "reenable"
skip = '*.json,*.csv,*.xml,*.txt,*.lock'

[tool.ruff]
fix = true
preview = true
line-length = 90
lint.select = ["ALL"]
lint.ignore = [
  "ANN401", # https://docs.astral.sh/ruff/rules/any-type/
  "D107",   # https://docs.astral.sh/ruff/rules/undocumented-public-init/
  "S314",   # https://docs.astral.sh/ruff/rules/suspicious-xml-element-tree-usage/
  "TRY003", # https://docs.astral.sh/ruff/rules/raise-vanilla-args/
  "ISC001", # https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/
  "TD002",  # https://docs.astral.sh/ruff/rules/missing-todo-author/
  "TD003",  # https://docs.astral.sh/ruff/rules/missing-todo-link/
  "EM",     # https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
  "FIX002", # https://docs.astral.sh/ruff/rules/line-contains-todo/
  "ANN101", # https://docs.astral.sh/ruff/rules/missing-type-self/
  "CPY",    # https://docs.astral.sh/ruff/rules/#flake8-copyright-cpy
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]
"tests/**/*.py" = [
  "D101",    # https://docs.astral.sh/ruff/rules/undocumented-public-class/
  "FBT001",  # https://docs.astral.sh/ruff/rules/boolean-type-hint-positional-argument/
  "FBT002",  # https://docs.astral.sh/ruff/rules/boolean-default-value-positional-argument/
  "PT011",   # https://docs.astral.sh/ruff/rules/pytest-raises-too-broad/
  "PLR0124", # https://docs.astral.sh/ruff/rules/comparison-with-itself/
  "PLR0133", # https://docs.astral.sh/ruff/rules/comparison-of-constant/
  "PLR2004", # https://docs.astral.sh/ruff/settings/#pylint-allow-magic-value-types
  "S101",    # https://docs.astral.sh/ruff/rules/assert/
  "S105",    # https://docs.astral.sh/ruff/rules/hardcoded-password-string/
  "S106",    # https://docs.astral.sh/ruff/rules/hardcoded-password-func-arg/
  "S113",    # https://docs.astral.sh/ruff/rules/request-without-timeout/
  "S311",    # https://docs.astral.sh/ruff/rules/suspicious-non-cryptographic-random-usage/
  "S324",    # https://docs.astral.sh/ruff/rules/hashlib-insecure-hash-function/
  "INP",     # https://docs.astral.sh/ruff/rules/#flake8-no-pep420-inp
  "SLF001",  # https://docs.astral.sh/ruff/rules/private-member-access/
]

[tool.ruff.lint.pycodestyle]
max-line-length = 115

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 10
allow-dunder-method-names = ["__json__"]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.vulture]
min_confidence = 70
paths = ["tests", "led_matrix_controller"]
exclude = ["led_matrix_controller/utils/_rgbmatrix.py"]
sort_by_size = true
